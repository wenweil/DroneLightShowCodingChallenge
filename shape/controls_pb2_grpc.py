# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import controls_pb2 as controls__pb2


class DroneControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DroneUpdate = channel.unary_unary(
                '/DroneControl/DroneUpdate',
                request_serializer=controls__pb2.DroneUpdateCommand.SerializeToString,
                response_deserializer=controls__pb2.DroneUpdateResponse.FromString,
                )
        self.GetDroneInfo = channel.unary_unary(
                '/DroneControl/GetDroneInfo',
                request_serializer=controls__pb2.GetAllDroneRequest.SerializeToString,
                response_deserializer=controls__pb2.DroneInfoReqResponse.FromString,
                )
        self.DroneState = channel.unary_unary(
                '/DroneControl/DroneState',
                request_serializer=controls__pb2.DroneStateReq.SerializeToString,
                response_deserializer=controls__pb2.DroneStateResponse.FromString,
                )


class DroneControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DroneUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDroneInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DroneState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DroneControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DroneUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.DroneUpdate,
                    request_deserializer=controls__pb2.DroneUpdateCommand.FromString,
                    response_serializer=controls__pb2.DroneUpdateResponse.SerializeToString,
            ),
            'GetDroneInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDroneInfo,
                    request_deserializer=controls__pb2.GetAllDroneRequest.FromString,
                    response_serializer=controls__pb2.DroneInfoReqResponse.SerializeToString,
            ),
            'DroneState': grpc.unary_unary_rpc_method_handler(
                    servicer.DroneState,
                    request_deserializer=controls__pb2.DroneStateReq.FromString,
                    response_serializer=controls__pb2.DroneStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DroneControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DroneControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DroneUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DroneControl/DroneUpdate',
            controls__pb2.DroneUpdateCommand.SerializeToString,
            controls__pb2.DroneUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDroneInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DroneControl/GetDroneInfo',
            controls__pb2.GetAllDroneRequest.SerializeToString,
            controls__pb2.DroneInfoReqResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DroneState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DroneControl/DroneState',
            controls__pb2.DroneStateReq.SerializeToString,
            controls__pb2.DroneStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
